version: 0.2
phases:
  install:
    commands:
      # This file configures apt to remove it's cache after installs - we want this cache, so we remove this config
      - rm -f /etc/apt/apt.conf.d/docker-clean

      # Install required packages
      - php -v


      - bash -c "$(curl -fsSL https://raw.githubusercontent.com/thii/aws-codebuild-extras/master/install)"

  build:
    commands:
      - echo Build started on `date`
      - echo Installing composer deps
      - composer install --no-progress --no-suggest

  post_build:
    commands:
      - echo Build completed on `date`

      # Create a mysql database
      # Do you need to do this? In many cases phpunit will use sqllite or similar to avoid the need for a real DB.
      # If you don't need it delete it
      # - /usr/bin/mysql  -u root -e "GRANT ALL ON *.* TO 'test'@'localhost' IDENTIFIED BY '' WITH GRANT OPTION"
      # - mysqladmin -u test create test

      # Run your tests
      - ./vendor/bin/phpunit --debug

      #- aws s3 sync --delete  coverage/ "s3://${COVERAGE_S3_BUCKET}/coverage"

      # Deployment to the SFTP server
      - bash ./codebuild-deploy.sh

cache:
  paths:
    # Debian package caches, so we don't need to keep redownloading debian packages and lists:
    - /var/cache/apt/**/*
    - /var/lib/apt/lists/**/*

    # Composer cache:
    - /root/.composer/**/*

    # Node modules, if you need nodejs based tools like webpack during your build
    - /root/.npm/**/*
    - /usr/lib/node_modules/**/*